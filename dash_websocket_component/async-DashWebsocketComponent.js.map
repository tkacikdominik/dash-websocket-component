{"version":3,"file":"async-DashWebsocketComponent.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashWebsocketComponent.react.js"],"sourcesContent":["import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class DashWebsocketComponent extends Component {\r\n    _init_client() {\r\n        let {url} = this.props;\r\n        const {protocols} = this.props;\r\n        url = url ? url : 'ws://' + location.host + location.pathname + 'ws';\r\n        this.client = new WebSocket(url, protocols);\r\n\r\n        this.client.onopen = (e) => {\r\n            this.props.setProps({\r\n                ...this.props,\r\n                state: {\r\n                    readyState: WebSocket.OPEN,\r\n                    isTrusted: e.isTrusted,\r\n                    timeStamp: e.timeStamp,\r\n                    origin: e.origin,\r\n                    lastConnected: Number(new Date()),\r\n                },\r\n            });\r\n        };\r\n        this.client.onmessage = (e) => {\r\n            this.props.setProps({\r\n                ...this.props,\r\n                state: {\r\n                    lastConnected: Number(new Date()),\r\n                },\r\n                message: {\r\n                    data: e.data,\r\n                    isTrusted: e.isTrusted,\r\n                    origin: e.origin,\r\n                    timeStamp: e.timeStamp,\r\n                },\r\n            });\r\n        };\r\n        this.client.onerror = (e) => {\r\n            this.props.setProps({error: JSON.stringify(e)});\r\n        };\r\n        this.client.onclose = (e) => {\r\n            this.props.setProps({\r\n                ...this.props,\r\n                error: JSON.stringify(e),\r\n                state: {\r\n                    readyState: WebSocket.CLOSED,\r\n                    isTrusted: e.isTrusted,\r\n                    timeStamp: e.timeStamp,\r\n                    code: e.code,\r\n                    reason: e.reason,\r\n                    wasClean: e.wasClean,\r\n                    lastConnected: Number(new Date()),\r\n                },\r\n            });\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setProps({\r\n            state: {\r\n                ...this.props.state,\r\n                lastConnected: 0,\r\n            },\r\n        });\r\n        this._init_client();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.client.readyState === WebSocket.CLOSED) {\r\n            this._init_client();\r\n        }\r\n\r\n        const {send} = this.props;\r\n        if (send && send !== prevProps.send) {\r\n            if (this.client.readyState === WebSocket.OPEN) {\r\n                this.client.send(send);\r\n            }\r\n            // TODO handle this\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.client.onopen = null;\r\n        this.client.onclose = null;\r\n        this.client.onerror = null;\r\n        this.client.onmessage = null;\r\n        this.client.close();\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nDashWebsocketComponent.defaultProps = {\r\n    state: {readyState: WebSocket.CONNECTING},\r\n};\r\n\r\nDashWebsocketComponent.propTypes = {\r\n    /**\r\n     * This websocket state (in the readyState prop) and associated information.\r\n     */\r\n    state: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * When messages are received, this property is updated with the message content.\r\n     */\r\n    message: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * This property is set with the content of the onerror event.\r\n     */\r\n    error: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * When this property is set, a message is sent with its content.\r\n     */\r\n    send: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * The websocket endpoint (e.g. wss://echo.websocket.org).\r\n     */\r\n    url: PropTypes.string,\r\n\r\n    /**\r\n     * Supported websocket protocols (optional).\r\n     */\r\n    protocols: PropTypes.arrayOf(PropTypes.string),\r\n\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func,\r\n};\r\n"],"names":["DashWebsocketComponent","_Component","_classCallCheck","_callSuper","arguments","_inherits","key","value","_this","url","this","props","protocols","location","host","pathname","client","WebSocket","onopen","e","setProps","_objectSpread","state","readyState","OPEN","isTrusted","timeStamp","origin","lastConnected","Number","Date","onmessage","message","data","onerror","error","JSON","stringify","onclose","CLOSED","code","reason","wasClean","_init_client","prevProps","send","close","Component","defaultProps","CONNECTING","propTypes","PropTypes","id"],"sourceRoot":""}