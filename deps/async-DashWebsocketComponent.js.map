{"version":3,"file":"async-DashWebsocketComponent.js","mappings":"koDACmC,IAEdA,EAAsB,SAAAC,GAAA,SAAAD,IAAA,O,4FAAAE,CAAA,KAAAF,GAAAG,EAAA,KAAAH,EAAAI,UAAA,C,QAiFtC,O,qRAjFsCC,CAAAL,EAAAC,G,EAAAD,G,EAAA,EAAAM,IAAA,eAAAC,MACvC,WAAe,IAAAC,EAAA,KACNC,EAAOC,KAAKC,MAAZF,IACEG,EAAaF,KAAKC,MAAlBC,UACPH,EAAMA,GAAY,QAAUI,SAASC,KAAOD,SAASE,SAAW,KAChEL,KAAKM,OAAS,IAAIC,UAAUR,EAAKG,GACjCF,KAAKM,OAAOE,OAAS,SAACC,GAClBX,EAAKG,MAAMS,SAAS,CAChBC,MAAO,CACHC,WAAYL,UAAUM,KACtBC,UAAWL,EAAEK,UACbC,UAAWN,EAAEM,UACbC,OAAQP,EAAEO,SAGtB,EACAhB,KAAKM,OAAOW,UAAY,SAACR,GACrBX,EAAKG,MAAMS,SAAS,CAChBQ,QAAS,CACLC,KAAMV,EAAEU,KACRL,UAAWL,EAAEK,UACbE,OAAQP,EAAEO,OACVD,UAAWN,EAAEM,YAGzB,EACAf,KAAKM,OAAOc,QAAU,SAACX,GACnBX,EAAKG,MAAMS,SAAS,CAACW,MAAOC,KAAKC,UAAUd,IAC/C,EACAT,KAAKM,OAAOkB,QAAU,SAACf,GACnBX,EAAKG,MAAMS,SAAS,CAACW,MAAOC,KAAKC,UAAUd,KAC3CX,EAAKG,MAAMS,SAAS,CAChBC,MAAO,CACHC,WAAYL,UAAUkB,OACtBX,UAAWL,EAAEK,UACbC,UAAWN,EAAEM,UACbW,KAAMjB,EAAEiB,KACRC,OAAQlB,EAAEkB,OACVC,SAAUnB,EAAEmB,WAGxB,CACJ,GAAC,CAAAhC,IAAA,YAAAC,MAED,WAAY,IAAAgC,EAAA,KACR7B,KAAKC,MAAMS,SAAS,CAChBC,MAAO,CACHmB,cAAe,EACflB,WAAYL,UAAUkB,UAG9BM,aAAY,WACJF,EAAK5B,MAAMU,MAAMC,aAAeL,UAAUkB,QAC1CI,EAAKG,cAEb,GAAG,IACP,GAAC,CAAApC,IAAA,oBAAAC,MAED,WACIG,KAAKiC,WACT,GAAC,CAAArC,IAAA,qBAAAC,MAED,SAAmBqC,GACf,IAAOC,EAAQnC,KAAKC,MAAbkC,KACHA,GAAQA,IAASD,EAAUC,MACvBnC,KAAKC,MAAMU,MAAMC,aAAeL,UAAUM,MAC1Cb,KAAKM,OAAO6B,KAAKA,EAG7B,GAAC,CAAAvC,IAAA,uBAAAC,MAED,WACIG,KAAKM,OAAOE,OAAS,KACrBR,KAAKM,OAAOkB,QAAU,KACtBxB,KAAKM,OAAOc,QAAU,KACtBpB,KAAKM,OAAOW,UAAY,KACxBjB,KAAKM,OAAO8B,OAChB,GAAC,CAAAxC,IAAA,SAAAC,MAED,WACI,OAAO,IACX,M,oEAACP,CAAA,CAjFsC,CAAS+C,EAAAA,WAoFpD/C,EAAuBgD,aAAe,CAClC3B,MAAO,CAACC,WAAYL,UAAUgC,aAGlCjD,EAAuBkD,UAAY,CAI/B7B,MAAO8B,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAK9CvB,QAASuB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAKhDpB,MAAOoB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAK9CN,KAAMM,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAK7C1C,IAAK0C,IAAAA,OAKLvC,UAAWuC,IAAAA,QAAkBA,IAAAA,QAK7BC,GAAID,IAAAA,OAMJ/B,SAAU+B,IAAAA,K","sources":["webpack:///./src/lib/fragments/DashWebsocketComponent.react.js"],"sourcesContent":["import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class DashWebsocketComponent extends Component {\r\n    _init_client() {\r\n        let {url} = this.props;\r\n        const {protocols} = this.props;\r\n        url = url ? url : 'ws://' + location.host + location.pathname + 'ws';\r\n        this.client = new WebSocket(url, protocols);\r\n        this.client.onopen = (e) => {\r\n            this.props.setProps({\r\n                state: {\r\n                    readyState: WebSocket.OPEN,\r\n                    isTrusted: e.isTrusted,\r\n                    timeStamp: e.timeStamp,\r\n                    origin: e.origin,\r\n                },\r\n            });\r\n        };\r\n        this.client.onmessage = (e) => {\r\n            this.props.setProps({\r\n                message: {\r\n                    data: e.data,\r\n                    isTrusted: e.isTrusted,\r\n                    origin: e.origin,\r\n                    timeStamp: e.timeStamp,\r\n                },\r\n            });\r\n        };\r\n        this.client.onerror = (e) => {\r\n            this.props.setProps({error: JSON.stringify(e)});\r\n        };\r\n        this.client.onclose = (e) => {\r\n            this.props.setProps({error: JSON.stringify(e)});\r\n            this.props.setProps({\r\n                state: {\r\n                    readyState: WebSocket.CLOSED,\r\n                    isTrusted: e.isTrusted,\r\n                    timeStamp: e.timeStamp,\r\n                    code: e.code,\r\n                    reason: e.reason,\r\n                    wasClean: e.wasClean,\r\n                },\r\n            });\r\n        };\r\n    }\r\n\r\n    _watchdog() {\r\n        this.props.setProps({\r\n            state: {\r\n                lastConnected: 0,\r\n                readyState: WebSocket.CLOSED,\r\n            },\r\n        });\r\n        setInterval(() => {\r\n            if (this.props.state.readyState === WebSocket.CLOSED) {\r\n                this._init_client();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._watchdog();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {send} = this.props;\r\n        if (send && send !== prevProps.send) {\r\n            if (this.props.state.readyState === WebSocket.OPEN) {\r\n                this.client.send(send);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.client.onopen = null;\r\n        this.client.onclose = null;\r\n        this.client.onerror = null;\r\n        this.client.onmessage = null;\r\n        this.client.close();\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nDashWebsocketComponent.defaultProps = {\r\n    state: {readyState: WebSocket.CONNECTING},\r\n};\r\n\r\nDashWebsocketComponent.propTypes = {\r\n    /**\r\n     * This websocket state (in the readyState prop) and associated information.\r\n     */\r\n    state: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * When messages are received, this property is updated with the message content.\r\n     */\r\n    message: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * This property is set with the content of the onerror event.\r\n     */\r\n    error: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * When this property is set, a message is sent with its content.\r\n     */\r\n    send: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * The websocket endpoint (e.g. wss://echo.websocket.org).\r\n     */\r\n    url: PropTypes.string,\r\n\r\n    /**\r\n     * Supported websocket protocols (optional).\r\n     */\r\n    protocols: PropTypes.arrayOf(PropTypes.string),\r\n\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func,\r\n};\r\n"],"names":["DashWebsocketComponent","_Component","_classCallCheck","_callSuper","arguments","_inherits","key","value","_this","url","this","props","protocols","location","host","pathname","client","WebSocket","onopen","e","setProps","state","readyState","OPEN","isTrusted","timeStamp","origin","onmessage","message","data","onerror","error","JSON","stringify","onclose","CLOSED","code","reason","wasClean","_this2","lastConnected","setInterval","_init_client","_watchdog","prevProps","send","close","Component","defaultProps","CONNECTING","propTypes","PropTypes","id"],"sourceRoot":""}