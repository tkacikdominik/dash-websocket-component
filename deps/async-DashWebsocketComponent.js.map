{"version":3,"file":"async-DashWebsocketComponent.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashWebsocketComponent.react.js"],"sourcesContent":["import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst UNLIMITED_RECONNECT_ATTEMPTS = -1;\r\nconst DEFAULT_RECONNECT_INTERVAL_MS = 2000;\r\nexport default class DashWebsocketComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          isConnected: false,\r\n          reconnectAttempts: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.url){\r\n            this.connectWebSocket();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {send, url} = this.props;\r\n        if (this.ws == null){\r\n            if (url != null){\r\n                this.connectWebSocket();\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (send && send !== prevProps.send) {\r\n            if (this.ws.readyState === WebSocket.OPEN) {\r\n                this.ws.send(send);\r\n            } else {\r\n                console.error(`Trying to send data -> ${send} over closed websocket connection.`);\r\n            }\r\n        }\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.disconnectWebSocket();\r\n    }\r\n\r\n    attemptReconnect() {\r\n        if (\r\n            (this.props.maxReconnectAttempts === UNLIMITED_RECONNECT_ATTEMPTS) ||\r\n            (this.state.reconnectAttempts < this.props.maxReconnectAttempts)\r\n        ) {\r\n          setTimeout(() => {\r\n            this.setState({reconnectAttempts: this.state.reconnectAttempts += 1});\r\n            let maxReconnectAttemptsStr = (\r\n                this.props.maxReconnectAttempts == UNLIMITED_RECONNECT_ATTEMPTS ? 'Unlimited' : this.props.maxReconnectAttempts\r\n            );\r\n            console.log(\r\n                `Attempting to reconnect... Attempt (${this.state.reconnectAttempts}/${maxReconnectAttemptsStr})`\r\n            );\r\n            this.connectWebSocket();\r\n          }, this.props.reconnectIntervalMs);\r\n        } else {\r\n          console.error('Max reconnect attempts reached.');\r\n        }\r\n    };\r\n\r\n    connectWebSocket() {\r\n        const { url, protocols } = this.props;\r\n\r\n        this.ws = new WebSocket(url, protocols);    \r\n\r\n        this.ws.onopen = () => {\r\n            console.log('WebSocket connected');\r\n            this.setState({\r\n                isConnected: true,\r\n                reconnectAttempts: 0\r\n            });\r\n        };\r\n\r\n        this.ws.onmessage = (msg) => {\r\n            this.props.setProps({\r\n                message: {\r\n                    data: msg.data,\r\n                    isTrusted: msg.isTrusted,\r\n                    origin: msg.origin,\r\n                    timeStamp: msg.timeStamp,\r\n                }\r\n            });\r\n        };\r\n\r\n        this.ws.onclose = () => {\r\n            console.log('WebSocket disconnected');\r\n            this.setState({ isConnected: false });\r\n            this.disconnectWebSocket();\r\n            this.attemptReconnect();\r\n        };\r\n\r\n        this.ws.onerror = (error) => {\r\n            this.props.setProps({error: JSON.stringify(error)});\r\n            if (this.ws?.readyState == WebSocket.OPEN){\r\n                this.ws.close();\r\n            }\r\n        };\r\n    };\r\n\r\n    disconnectWebSocket() {\r\n        if (this.ws?.readyState == WebSocket.OPEN || this.ws?.readyState == WebSocket.CONNECTING) {\r\n          this.ws.close();\r\n          delete this.ws;\r\n        }\r\n    };\r\n    \r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nDashWebsocketComponent.defaultProps = {\r\n    state: {},\r\n    maxReconnectAttempts: UNLIMITED_RECONNECT_ATTEMPTS,\r\n    reconnectIntervalMs: DEFAULT_RECONNECT_INTERVAL_MS,\r\n};\r\n\r\nDashWebsocketComponent.propTypes = {\r\n    /**\r\n     * This websocket state (in the readyState prop) and associated information.\r\n     */\r\n    state: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * When messages are received, this property is updated with the message content.\r\n     */\r\n    message: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * This property is set with the content of the onerror event.\r\n     */\r\n    error: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * When this property is set, a message is sent with its content.\r\n     */\r\n    send: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n\r\n    /**\r\n     * Supported websocket protocols (optional).\r\n     */\r\n    protocols: PropTypes.arrayOf(PropTypes.string),\r\n\r\n    /**\r\n     * Duration between attempts to reconnect. Default = 2000ms -> 2sec.\r\n     */\r\n    reconnectIntervalMs: PropTypes.number,\r\n    \r\n    /**\r\n     * Max count of the reconnect attempts. Default = -1 -> Unlimited. \r\n     */\r\n    maxReconnectAttempts: PropTypes.number,\r\n\r\n    /**\r\n     * The websocket endpoint (e.g. wss://echo.websocket.org).\r\n     */\r\n    url: PropTypes.string,\r\n\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func,\r\n};"],"names":["DashWebsocketComponent","_Component","props","_this","_classCallCheck","_callSuper","state","isConnected","reconnectAttempts","_inherits","key","value","this","url","connectWebSocket","prevProps","_this$props","send","ws","readyState","WebSocket","OPEN","console","error","concat","disconnectWebSocket","_this2","maxReconnectAttempts","setTimeout","setState","maxReconnectAttemptsStr","log","reconnectIntervalMs","_this3","_this$props2","protocols","onopen","onmessage","msg","setProps","message","data","isTrusted","origin","timeStamp","onclose","attemptReconnect","onerror","_this3$ws","JSON","stringify","close","_this$ws","_this$ws2","CONNECTING","Component","defaultProps","propTypes","PropTypes","id"],"sourceRoot":""}